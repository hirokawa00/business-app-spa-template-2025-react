/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as RouteRouteImport } from './routes/route'
import { Route as PublicLoginRouteRouteImport } from './routes/_public/login/route'
import { Route as AuthenticatedDashboardRouteRouteImport } from './routes/_authenticated/dashboard/route'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const RouteRoute = RouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicLoginRouteRoute = PublicLoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const AuthenticatedDashboardRouteRoute =
  AuthenticatedDashboardRouteRouteImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof RouteRoute
  '/dashboard': typeof AuthenticatedDashboardRouteRoute
  '/login': typeof PublicLoginRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof RouteRoute
  '/dashboard': typeof AuthenticatedDashboardRouteRoute
  '/login': typeof PublicLoginRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof RouteRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRouteRoute
  '/_public/login': typeof PublicLoginRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/login'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_public'
    | '/_authenticated/dashboard'
    | '/_public/login'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  RouteRoute: typeof RouteRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRouteRoute: typeof AuthenticatedDashboardRouteRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRouteRoute: AuthenticatedDashboardRouteRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface PublicRouteChildren {
  PublicLoginRouteRoute: typeof PublicLoginRouteRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRouteRoute: PublicLoginRouteRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  RouteRoute: RouteRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
